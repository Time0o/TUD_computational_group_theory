#ifndef GUARD_PR_RANDOMIZER_H
#define GUARD_PR_RANDOMIZER_H

#include "perm_set.hpp"

/**
 * @file pr_randomizer.hpp
 * @brief Defines `PrRandomizer`.
 *
 * @author Timo Nicolai
 */

namespace mpsym
{

namespace internal
{

class Perm;

/** A class encapsulation of the product replacement algorithm and
 *  \f$S_n\f$/\f$A_n\f$ testing.
 *
 * The product replacement algorithm is used for the generation of random
 * permutation group elements from a set of generating permutations (i.e.
 * without the need for a BSGS). It is utilized in the implementation of the
 * random Schreier Sims algorithm. This class also implements Monte Carlo
 * algorithms for checking whether a given generating set of permutations
 * produces a symmetric or alternating permutation group. For details on the
 * product replacement algorithm and \f$S_n\f$/\f$A_n\f$ testing, see \cite
 * holt05.
 */
class PrRandomizer
{
public:
  /** Construct a product randomizer object.
   *
   * The resulting object can be used to repeatedly obtain random group elements
   * by calling the next() function. This constructor performs some necessary
   * initialization overhead, subsequent calls to next() will be relatively
   * efficient. The `n_generators` and `iterations` arguments can be used to
   * potentially improve the "randomness" of elements returned by `next`, see
   * \cite holt05 for details.
   *
   * \param generators
   *     a vector of `Perm` objects representing a generating set for the group
   *     for which random elements are to be created by calls to next()
   *
   * \param n_generators
   *     minimum number of group generators stored internally, if this is
   *     larger than the number of provided generators, additional group
   *     generators are generated during the initialization performed by this
   *     constructor; these generators are utilized in the generation of random
   *     group elements by next(), different values might lead to "more random"
   *     elements
   *
   * \param iterations
   *	 number of initial "dry runs" performed before the first random element
   *	 is handed out by next(), higher values might lead to the generation of
   *	 "more random" elements, at the cost of a slightly increased runtime of
   *	 this constructor
   */
  PrRandomizer(PermSet const &generators,
               unsigned n_generators = 10,
               unsigned iterations = 20);

  /** Produce a random group element.
   *
   * Note that this function is not cryptographically secure.
   *
   * \return a random element of the permutation generated by the set of
   *         permutations passed to this object's constructor
   */
  Perm next();

  /** Test whether a permutation group is a symmetric group without the need to
   *  construct a BSGS.
   *
   * This test is probabilistic, a positive result is guaranteed to be correct,
   * a negative result is incorrect with a certain probability `epsilon`. Note
   * that this function's behaviour is undefined if the group described by the
   * generating set represented by `generators` has `degree < 8u`.
   *
   * \param epsilon
   *     probability that a return value of `false` is incorrect, lower values
   *     of epsilon might increase this function's runtime.
   *
   * \return `true` (or `false` with probability `epsilon`) if the generators
   *         passed as an argument to this object's constructor represent a
   *         generating set for a symmetric permutation group, else `false`.
   */
  bool test_symmetric(double epsilon = 1e-6);

  /** Test whether a permutation group is an alternating group without the need
   *  to construct a BSGS.
   *
   * This test is probabilistic, a positive result is guaranteed to be correct,
   * a negative result is incorrect with a certain probability `epsilon`. Note
   * that this function's behaviour is undefined if the group described by the
   * generating set represented by `generators` has `degree < 8u`.
   *
   * \param epsilon
   *     probability that a return value of `false` is incorrect, lower values
   *     of epsilon might increase this function's runtime.
   *
   * \return `true` (or `false` with probability `epsilon`) if the generators
   *         passed as an argument to this object's constructor represent a
   *         generating set for an alternating  permutation group, else `false`.
   */
  bool test_alternating(double epsilon = 1e-6);

private:
  bool test_altsym(double epsilon);
  bool generators_even();

  PermSet _gens_orig;
  PermSet _gens;
};

} // namespace internal

} // namespace mpsym

#endif // GUARD_PR_RANDOMIZER_H
