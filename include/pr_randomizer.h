#ifndef _GUARD_PR_RANDOMIZER_H
#define _GUARD_PR_RANDOMIZER_H

#include <random>
#include <vector>

#include "perm.h"

/**
 * @file pr_randomizer.h
 * @brief Defines `PrRandomizer`.
 *
 * @author Timo Nicolai
 */

namespace cgtl
{

/** A class encapsulation of the product replacement algorithm.
 *
 * The product replacement algorithm is used for the generation of random
 * permutation group elements from a set of generating permutations (i.e.
 * without the need for a base and strong generating set). It is e.g. utilized
 * in the implementation of the random Schreier Sims algorithm. For details
 * on the product replacement algorithm see \cite holt05.
 */
class PrRandomizer
{
public:
  /** Construct a product randomizer object.
   *
   * The resulting object can be used to repeatedly obtain random group elements
   * by calling the next() function. This constructor performs some necessary
   * initialization overhead, subsequent calls to next() will be relatively
   * efficient. The `n_generators` and `iterations` arguments can be used to
   * potentially improve the "randomness" of elements returned by `next`, see
   * \cite holt05 for details.
   *
   * \param generators
   *     a vector of `Perm` objects representing a generating set for the group
   *     for which random elements are to be created by calls to next()
   *
   * \param n_generators
   *     minimum number of group generators stored internally, if this is
   *     larger than the number of provided generators, additional group
   *     generators are generated during the initialization performed by this
   *     constructor; these generators are utilized in the generation of random
   *     group elements by next(), different values might lead to "more random"
   *     elements
   *
   * \param iterations
   *	 number of initial "dry runs" performed before the first random element
   *	 is handed out by next(), higher values might lead to the generation of
   *	 "more random" elements, at the cost of a slightly increased runtime of
   *	 this constructor
   */
  PrRandomizer(std::vector<Perm> const &generators,
    unsigned n_generators = 10, unsigned iterations = 20);

  /** Produce a random group element.
   *
   * Note that this function is not cryptographically secure.
   *
   * \return a random element of the permutation generated by the set of
   *         permutations passed to this object's constructor
   */
  Perm next();

private:
  std::vector<Perm> _gens;
  unsigned _iterations;
};

} // namespace cgtl

#endif // _GUARD_PR_RANDOMIZER_H
