#!/usr/bin/env python3

import os
import re
import sys

from argparse import ArgumentParser, RawTextHelpFormatter


DESC = """\
Convert permutation sets from the format used in MPSyms debug output to that
used by GAP."""

PERM = r'(\(\)|(\(\d+( \d+)+\))+)'
PERM_VECT = r'\[({p}(, {p})*)?\]'.format(p=PERM)


def convert_perm_vect(perm_vect):
    if not re.match(PERM_VECT, perm_vect):
      raise ValueError("invalid permutation vector: {}".format(perm_vect))

    perms = perm_vect[1:-1].split(', ')

    perms_gap = [p.replace(' ', ',') for p in perms]
    perm_vect_gap = '[{}]'.format(','.join(perms_gap))

    return perm_vect_gap


if __name__ == '__main__':
    # program name
    progname = os.path.basename(__file__)

    # parse arguments TODO: -i/-o
    def formatter_class(prog):
        return RawTextHelpFormatter(prog, max_help_position=80)

    parser = ArgumentParser(description=DESC, formatter_class=formatter_class)

    args = parser.parse_args()

    # convert input
    for line in sys.stdin:
        print(convert_perm_vect(line.rstrip()))
